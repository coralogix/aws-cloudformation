AWSTemplateFormatVersion: 2010-09-09
Parameters:
  CoralogixRegion:
    Type: String
    Description: The Coralogix location region [EU1, EU2, AP1, AP2, AP3, US1, US2]
    AllowedValues:
      - EU1
      - EU2
      - AP1
      - AP2
      - AP3
      - US1
      - US2
  PrivateKey:
    Type: String
    Description: The Coralogix Send-Your-Data API Key which is used to validate your authenticity
    NoEcho: true
  S3ConfigARN:
    Type: String
    Description: The S3 ARN for your uploaded Coralogix Fluent Bit configuration file

Mappings:
  CoralogixRegionMap:
    EU1:
      Endpoint: ingress.coralogix.com
      Domain: coralogix.com
    EU2:
      Endpoint: ingress.eu2.coralogix.com
      Domain: eu2.coralogix.com
    AP1:
      Endpoint: ingress.coralogix.in
      Domain: coralogix.in
    AP2:
      Endpoint: ingress.coralogixsg.com
      Domain: coralogixsg.com
    AP3:
      Endpoint: ingress.ap3.coralogix.com
      Domain: ap3.coralogix.com
    US1:
      Endpoint: ingress.coralogix.us
      Domain: coralogix.us
    US2:
      Endpoint: ingress.cx498-aws-us-west-2.coralogix.com
      Domain: cx498.coralogix.com

Resources:
  OTELConfigParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /CX_OTEL/config.yaml
      Description: Configuration parameter for Coralogix OTEL Collector
      Type: String
      Value: |
        exporters:
          coralogix:
            application_name: 'otel'
            application_name_attributes:
            - aws.ecs.task.family
            - service.namespace
            domain: ${CORALOGIX_DOMAIN}
            logs:
              headers:
                X-Coralogix-Distribution: ecs-fargate-integration/0.0.1
            metrics:
              headers:
                X-Coralogix-Distribution: ecs-fargate-integration/0.0.1
            private_key: ${PRIVATE_KEY}
            subsystem_name: 'integration'
            subsystem_name_attributes:
            - service.name
            - aws.ecs.docker.name
            timeout: 30s
            traces:
              headers:
                X-Coralogix-Distribution: ecs-fargate-integration/0.0.1
        processors:
          batch:
            send_batch_max_size: 2048
            send_batch_size: 1024
            timeout: 1s
          resource/metadata:
            attributes:
            - action: upsert
              key: cx.otel_integration.name
              value: coralogix-integration-ecs-fargate
          resourcedetection:
            detectors:
            - env
            - ec2
            - ecs
            override: true
            timeout: 2s
        receivers:
          awsecscontainermetrics:
            collection_interval: 10s
          otlp:
            protocols:
              grpc:
                endpoint: 0.0.0.0:4317
              http:
                endpoint: 0.0.0.0:4318
          prometheus:
            config:
              scrape_configs:
              - job_name: opentelemetry-collector
                scrape_interval: 30s
                static_configs:
                - targets:
                  - 127.0.0.1:8888
        service:
          pipelines:
            metrics:
              exporters:
              - coralogix
              processors:
              - resource/metadata
              - resourcedetection
              - batch
              receivers:
              - otlp
              - awsecscontainermetrics
            traces:
              exporters:
              - coralogix
              processors:
              - resource/metadata
              - resourcedetection
              - batch
              receivers:
              - otlp
          telemetry:
            logs:
              level: "warn"
              encoding: json
            metrics:
              address: 0.0.0.0:8888
        
      Tier: Standard

  ECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: Coralogix-observability
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: demo
          Image: nginx
          Cpu: 0
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          Essential: true
          Environment: []
          MountPoints: []
          VolumesFrom: []
          LogConfiguration:
            LogDriver: awsfirelens
            Options:
              Format: json_lines
              Header: !Sub "Authorization Bearer ${PrivateKey}"
              Host: !FindInMap [CoralogixRegionMap, !Ref CoralogixRegion, Endpoint]
              Name: http
              Port: "443"
              Retry_Limit: "10"
              TLS: On
              URI: /logs/v1/singles
              Compress: gzip
        - Name: otel-collector
          Image: otel/opentelemetry-collector-contrib
          Cpu: 0
          PortMappings:
            - ContainerPort: 4317
              HostPort: 4317
              Protocol: tcp
            - ContainerPort: 4318
              HostPort: 4318
              Protocol: tcp
          Essential: false
          Command: ["--config", "env:SSM_CONFIG"]
          Environment:
            - Name: PRIVATE_KEY
              Value: !Ref PrivateKey
            - Name: CORALOGIX_DOMAIN
              Value: !FindInMap [CoralogixRegionMap, !Ref CoralogixRegion, Domain]
          MountPoints: []
          VolumesFrom: []
          Secrets:
            - Name: SSM_CONFIG
              ValueFrom: /CX_OTEL/config.yaml
          LogConfiguration:
            LogDriver: awsfirelens
            Options:
              Format: json_lines
              Header: !Sub "Authorization Bearer ${PrivateKey}"
              Host: !FindInMap [CoralogixRegionMap, !Ref CoralogixRegion, Endpoint]
              Name: http
              Port: "443"
              Retry_Limit: "10"
              TLS: On
              URI: /logs/v1/singles
              Compress: gzip
        - Name: log_router
          Image: public.ecr.aws/aws-observability/aws-for-fluent-bit:init-2.31.12
          Cpu: 0
          Essential: false
          Environment:
            - Name: aws_fluent_bit_init_s3_1
              Value: !Ref S3ConfigARN
          MountPoints: []
          VolumesFrom: []
          User: "0"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: "true"
              awslogs-group: /ecs/Coralogix-observability
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: log_router
          FirelensConfiguration:
            Type: fluentbit
            Options: {}

      RequiresCompatibilities:
        - FARGATE
      Cpu: '1024'
      Memory: '2048'

  ECSTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: Allows ECS tasks to call AWS services on your behalf.
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: AWSOpenTelemetryPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 's3:GetObject'
                  - 's3:GetBucketLocation'
                Resource: '*'
      RoleName: AWSOTelRole

  ECSExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: >-
        Allows ECS container agent makes calls to the Amazon ECS API on your
        behalf.
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess'
      RoleName: AWSOTelExecutionRole
