AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ApplicationName:
    Type: String
    Default: " "
  SubsystemName:
    Type: String
    Default: " "
  EventbridgeStream:
    Type: String
    Default: " "
  RoleName:
    Type: String
    Default: " "
  PrivateKey:
    Type: String
    Default: " "
  CoralogixRegion:
    Description: "The Coralogix location region, possible options are [EU1, EU2, AP1, AP2, AP3, US1, US2]"
    Type: String
    AllowedValues: [EU1, EU2, AP1, AP2, AP3, US1, US2]
    Default: "EU1"
  CustomUrl:
    Type: String

Resources:
  EventBridgePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "events:InvokeApiDestination"
            Resource:
              - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:api-destination/*"
      PolicyName: "EventBridge_policy"
      Roles:
        - !Ref EventBridgeRole

  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "events.amazonaws.com"
            Action: "sts:AssumeRole"
      RoleName: !Ref RoleName

  EventBridgePolicyAttachment:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "events:InvokeApiDestination"
            Resource:
              - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:api-destination/*"
      PolicyName: EventBridgePolicyAttach
      Roles:
        - !Ref EventBridgeRole

  EventBridgeConnection:
    Type: AWS::Events::Connection
    Properties:
      Name: "coralogixConnection"
      Description: "This is Coralogix connection for EventBridge"
      AuthorizationType: "API_KEY"
      AuthParameters:
        ApiKeyAuthParameters:           
          ApiKeyName: "x-amz-event-bridge-access-key"
          ApiKeyValue: !Ref PrivateKey
        InvocationHttpParameters:
          HeaderParameters: 
            - IsValueSecret: false
              Key: "cx-application-name"
              Value: !If [HasApplicationName, !Ref ApplicationName, !Sub "coralogix-${EventbridgeStream}"]
            - IsValueSecret: false
              Key: "cx-subsystem-name"
              Value: !If [HasSubsystemName, !Ref SubsystemName, !Sub "coralogix-${EventbridgeStream}"]

  ApiDestinationsTargetRole: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: eventbus-api-destinations-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: AllowApiDestinationsInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: InvokeApiDestination
                Effect: Allow
                Action:
                  - events:InvokeApiDestination
                Resource:
                  - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:api-destination/toCoralogix/*"

  EventBridgeApiDestination:
    Type: AWS::Events::ApiDestination
    Properties: 
      ConnectionArn: !GetAtt EventBridgeConnection.Arn
      Description: "EventBridge API destination to Coralogix"
      HttpMethod: "POST"
      InvocationEndpoint: !If 
        - CustomURLCondition
        - !Ref CustomUrl
        - !FindInMap [ EndpointUrl, !Ref CoralogixRegion, url ]
      InvocationRateLimitPerSecond: 300
      Name: "toCoralogix"

  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "eventbridge_rule"
      Description: "Capture the main events"
      EventPattern:
        account: 
          - !Sub "${AWS::AccountId}"
      RoleArn: !GetAtt EventBridgeRole.Arn
      Targets: 
        - Arn: !GetAtt EventBridgeApiDestination.Arn
          Id: !Ref EventBridgeApiDestination
          RoleArn: !GetAtt ApiDestinationsTargetRole.Arn

Conditions:
  HasApplicationName: !Not [!Equals [!Ref ApplicationName, ""]]
  HasSubsystemName: !Not [!Equals [!Ref SubsystemName, ""]]
  CustomURLCondition: !Not [!Equals [!Ref CustomUrl, ""]]

Mappings:
  EndpointUrl:
    EU1:
      url: "https://ingress.coralogix.com/aws/event-bridge"
    EU2:
      url: "https://ingress.eu2.coralogix.com/aws/event-bridge"
    AP1:
      url: "https://ingress.coralogixsg.com/aws/event-bridge"
    AP2:
      url: "https://ingress.coralogix.in/aws/event-bridge"
    AP3:
      url: "https://ingress.ap3.coralogix.com/aws/event-bridge"
    US1:
      url: "https://ingress.coralogix.us/aws/event-bridge"
    US2:
      url: "https://ingress.cx498.coralogix.com/aws/event-bridge"

Outputs:
  EventBridgeRuleName:
    Value: !Ref EventBridgeRule
  EventBridgeApiDestinationName:
    Value: !Ref EventBridgeApiDestination
  EventBridgeRoleName:
    Value: !Ref EventBridgeRole
