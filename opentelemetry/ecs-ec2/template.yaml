AWSTemplateFormatVersion: 2010-09-09
Description: |
  The template used to create an Otel ECS Service from on an ECS Console. Logs and Traces
  are enabled by default. Metrics are disabled by default. To enable metrics, set the
  Metrics parameter to "enable".

Parameters:
  ClusterName:
    Type: String

  Image:
    Description: |
      The opentelemetry image used to start the container.
      This defaults to the coralogixrepo/coralogix-otel-collector image.
      https://hub.docker.com/r/coralogixrepo/coralogix-otel-collector/tags
    Type: String
    Default: coralogixrepo/coralogix-otel-collector:v0.1.2

  Memory:
    Description: |
      The amount of memory (in MiB) used by the task.
      Note that you cluster must have sufficient memory available to support the given value.
    Type: Number
    Default: 256

  CoralogixRegion:
      Type: String
      Description: The Coralogix location region [Europe, Europe2, India, Singapore, US, US2]
      AllowedValues:
        - Europe
        - Europe2
        - India
        - Singapore
        - US
        - US2

  ApplicationName:
    Type: String
    Description: The name of your application
    MinLength: 1
    MaxLength: 64

  SubsystemName:
    Type: String
    Description: The subsystem name of your application
    MinLength: 1
    MaxLength: 64
    Default: "default"

  PrivateKey:
    Type: String
    Description: The Coralogix private key which is used to validate your authenticity
    NoEcho: true

  Metrics:
    Type: String
    Description: If true, cadivisor will be deployed on each node to collect metrics
    AllowedValues:
      - "enable"
      - "disabled"
    Default: "disabled"

  OtelConfig:
    Type: String
    Description: |
      The base64 encoded opentelemetry configuration string used to start the container.
      If left as default, the embedded configuration will be used.
    Default: "none"

Conditions:
  DefaultSubsystemName: !Equals [ !Ref SubsystemName, "default" ]
  Metrics: !Equals [ !Ref Metrics, "enable" ]
  UseCustomConfig: 
    Fn::Not: 
    - !Equals [ !Ref OtelConfig, "none" ]
  IgnoreCustomConfig: !Equals [ !Ref OtelConfig, "none" ]


Mappings:
  Otel:
    Config:
      Default: |
        receivers:
          otlp:
            protocols:
              grpc:
                endpoint: "0.0.0.0:4317"
              http:
                endpoint: "0.0.0.0:4318"

          prometheus:
            config:
              scrape_configs:
              - job_name: otel-collector-metrics
                scrape_interval: 60s
                static_configs:
                - targets: ['localhost:8888']

          filelog:
            start_at: end
            include:
              - /hostfs/var/lib/docker/containers/*/*.log

            include_file_path: true

            # add log.file.name to resource attributes
            operators:
              - type: move
                from: attributes["log.file.name"]
                to: resource["log.file.name"]

        processors:
          resourcedetection:
            # ecs & docker detectors not required when using ecslogresourcedetection for logs
            detectors: [env, ec2, system]
            timeout: 2s
            override: false

          ecsattributes:
            attributes:
              - ^image$
              - ^aws.*
              - ^labels.*
            container_id:
              sources:
                - "log.file.name"

          # only allow logs with container.name label
          filter/ecslogs:
            logs:
              include:
                match_type: regexp
                resource_attributes:
                  - key: aws.ecs.container.name
                    value: .*
        
          transform/logs:
            error_mode: ignore
            log_statements:
              - context: resource
                statements:
                  - set(attributes["cx_container_id"], attributes["docker.id"])
                  - set(attributes["aws_ecs_task_family"], attributes["aws.ecs.task.definition.family"])
            
        exporters:
          logging:
            verbosity: detailed
          coralogix:
            domain: "$CORALOGIX_DOMAIN"
            private_key: "$PRIVATE_KEY"
            application_name: "$APP_NAME"
            subsystem_name: "$SUB_SYS"
            application_name_attributes:
            - "aws.ecs.task.definition.family"
            subsystem_name_attributes:
            - "docker.name"
            - "log.file.name"
            timeout: 30s

        service:
          pipelines:
            logs:
              receivers: 
                - filelog
              processors:
                - resourcedetection
                - ecsattributes
                - filter/ecslogs
                - transform/logs
              exporters:
                - coralogix

            traces:
              receivers:
                - otlp
              exporters:
                - coralogix

            metrics:
              receivers:
                - prometheus
              exporters:
                - coralogix

          telemetry:
            metrics:
              address: 0.0.0.0:8888
              level: detailed

      Metrics: |
        receivers:
          otlp:
            protocols:
              grpc:
                endpoint: "0.0.0.0:4317"
              http:
                endpoint: "0.0.0.0:4318"

          prometheus:
            config:
              scrape_configs:
              - job_name: otel-collector-metrics
                scrape_interval: 60s
                static_configs:
                - targets: ['localhost:8888']

          filelog:
            start_at: end
            include:
              - /hostfs/var/lib/docker/containers/*/*.log
              
            include_file_path: true

            # add log.file.name to resource attributes
            operators:
              - type: move
                from: attributes["log.file.name"]
                to: resource["log.file.name"]

          # add metrics
          awsecscontainermetricsd:

        processors:
          resourcedetection:
            # ecs & docker detectors not required when using ecslogresourcedetection for logs
            detectors: [env, ec2, system]
            timeout: 2s
            override: false

          ecsattributes:
            container_id:
              sources:
                - "log.file.name"

          # only allow logs with container.name label
          filter/ecslogs:
            logs:
              include:
                match_type: regexp
                resource_attributes:
                  - key: aws.ecs.container.name
                    value: '.*'

          transform/logs:
            error_mode: ignore
            log_statements:
              - context: resource
                statements:
                  - set(attributes["cx_container_id"], attributes["docker.id"])
                  - set(attributes["aws_ecs_task_family"], attributes["aws.ecs.task.definition.family"])
                  - set(attributes["image_id"], attributes["image.id"])
                  - delete_key(attributes, "image.id")

          batch:
                  
        exporters:
          logging:
          coralogix:
            domain: "$CORALOGIX_DOMAIN"
            private_key: "$PRIVATE_KEY"
            application_name: "$APP_NAME"
            subsystem_name: "$SUB_SYS"
            application_name_attributes:
            - "aws.ecs.task.definition.family"
            subsystem_name_attributes:
            - "docker.name"
            - "log.file.name"
            timeout: 30s

        service:
          pipelines:
            logs:
              receivers: 
                - filelog
              processors:
                - resourcedetection
                - ecsattributes
                - filter/ecslogs
                - transform/logs
              exporters:
                - coralogix

            metrics:
              receivers:
                - awsecscontainermetricsd
              processors:
                - batch
              exporters:
                - coralogix
            
            traces:
              receivers:
                - otlp
              processors:
                - batch
              exporters:
                - coralogix

          telemetry:
            metrics:
              address: 0.0.0.0:8888
              level: detailed


  CoralogixRegionMap:
    Europe:
      Endpoint: ingress.coralogix.com:443
      Domain: coralogix.com
    Europe2:
      Endpoint: ingress.eu2.coralogix.com:443
      Domain: eu2.coralogix.com
    India:
      Endpoint: ingress.coralogix.in:443
      Domain: coralogix.in
    Singapore:
      Endpoint: ingress.coralogixsg.com:443
      Domain: coralogixsg.com
    US:
      Endpoint: ingress.coralogix.us:443
      Domain: coralogix.us
    US2:
      Endpoint: ingress.cx498-aws-us-west-2.coralogix.com:443
      Domain: cx498.coralogix.com


Resources:
  OtelTaskDefinition: 
    Type: AWS::ECS::TaskDefinition
    Condition: IgnoreCustomConfig
    Properties:
      Family: opentelemetry
      RequiresCompatibilities:
        - EC2
      NetworkMode: host
      Volumes:
        - Name: hostfs
          Host:
            SourcePath: "/"
  
        - Name: docker-socket
          Host:
            SourcePath: /var/run/docker.sock

      ContainerDefinitions:
        - Name: coralogix-otel-agent
          Cpu: 0
          Memory: !Ref Memory
          Image: !Ref Image
          Essential: true

          PortMappings:
            - HostPort: 4317
              Protocol: tcp
              ContainerPort: 4317
            
            - HostPort: 4318
              Protocol: tcp
              ContainerPort: 4318

            - HostPort: 8888
              Protocol: tcp
              ContainerPort: 8888

          # Privileged required to access certain host metrics
          Privileged: true

          MountPoints:
            - SourceVolume: hostfs
              ContainerPath: "/hostfs"
              ReadOnly: True

            - SourceVolume: docker-socket
              ContainerPath: /var/run/docker.sock

          Environment:
            - Name: CORALOGIX_DOMAIN
              Value: !FindInMap [CoralogixRegionMap, !Ref CoralogixRegion, Domain]

            - Name: OTEL_RESOURCE_ATTRIBUTES
              Value: !If
                - DefaultSubsystemName
                - !Sub "APP_NAME=${ApplicationName},SUB_SYS=${AWS::AccountId}"
                - !Sub "APP_NAME=${ApplicationName},SUB_SYS=${SubsystemName}"
           
            - Name: PRIVATE_KEY
              Value: !Ref PrivateKey

            - Name: APP_NAME
              Value: !Ref ApplicationName

            - Name: SUB_SYS
              Value: !Ref SubsystemName

            - Name: OTEL_CONFIG
              Value: !If
                - Metrics
                - !FindInMap [Otel, Config, Metrics]
                - !FindInMap [Otel, Config, Default]


  OtelTaskDefinitionCustom: 
    Type: AWS::ECS::TaskDefinition
    Condition: UseCustomConfig
    Properties:
      Family: opentelemetry
      RequiresCompatibilities:
        - EC2
      NetworkMode: host
      Volumes:
        - Name: hostfs
          Host:
            SourcePath: "/"
  
        - Name: docker-socket
          Host:
            SourcePath: /var/run/docker.sock

      ContainerDefinitions:
        - Name: coralogix-otel-agent
          Cpu: 0
          Memory: !Ref Memory
          Image: !Ref Image
          Essential: true

          PortMappings:
            - HostPort: 4317
              Protocol: tcp
              ContainerPort: 4317
            
            - HostPort: 4318
              Protocol: tcp
              ContainerPort: 4318

            - HostPort: 8888
              Protocol: tcp
              ContainerPort: 8888

          # Privileged required to access certain host metrics
          Privileged: true

          MountPoints:
            - SourceVolume: hostfs
              ContainerPath: "/hostfs"
              ReadOnly: True

            - SourceVolume: docker-socket
              ContainerPath: /var/run/docker.sock

          Environment:
            - Name: CORALOGIX_DOMAIN
              Value: !FindInMap [CoralogixRegionMap, !Ref CoralogixRegion, Domain]

            - Name: OTEL_RESOURCE_ATTRIBUTES
              Value: !If
                - DefaultSubsystemName
                - !Sub "APP_NAME=${ApplicationName},SUB_SYS=${AWS::AccountId}"
                - !Sub "APP_NAME=${ApplicationName},SUB_SYS=${SubsystemName}"
           
            - Name: PRIVATE_KEY
              Value: !Ref PrivateKey

            - Name: APP_NAME
              Value: !Ref ApplicationName

            - Name: SUB_SYS
              Value: !Ref SubsystemName

            - Name: OTEL_CONFIG
              Value: !Ref OtelConfig

  ECSService:
    Type: 'AWS::ECS::Service'
    Condition: IgnoreCustomConfig
    Properties:
      Cluster: !Ref ClusterName
      LaunchType: EC2
      ServiceName: coralogix-otel-agent
      SchedulingStrategy: DAEMON
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      PlacementStrategies: []
      PlacementConstraints: []
      Tags:
        - Key: 'ecs:service:stackId'
          Value: !Ref 'AWS::StackId'
      EnableECSManagedTags: true
      TaskDefinition: !Ref OtelTaskDefinition

  ECSServiceCustom:
    Type: 'AWS::ECS::Service'
    Condition: UseCustomConfig
    Properties:
      Cluster: !Ref ClusterName
      LaunchType: EC2
      ServiceName: coralogix-otel-agent
      SchedulingStrategy: DAEMON
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      PlacementStrategies: []
      PlacementConstraints: []
      Tags:
        - Key: 'ecs:service:stackId'
          Value: !Ref 'AWS::StackId'
      EnableECSManagedTags: true
      TaskDefinition: !Ref OtelTaskDefinitionCustom
      