AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  LambdaFunctionARN:
    Type: String
    Description: The ARN of the Lambda function to invoke
    
  WrapperHandler:
    Type: String
    Description: The path to the otel instrumentation executable
    Default: /opt/python/otel-instrument

  Runtime:
    Type: String
    Description: The language of the Lambda function
    Default: python
    AllowedValues:
      - python
      - nodejs
      - go

  Arch:
    Type: String
    Description: The architecture of the Lambda function
    Default: amd64
    AllowedValues:
      - amd64
      - arm64

Mappings:
  layers:
    python:
      amd64: arn:aws:lambda:eu-north-1:035955823196:layer:coralogix-aws-lambda-telemetry-exporter-python-x86_64:1
      arm64: arn:aws:lambda:eu-north-1:035955823196:layer:coralogix-aws-lambda-telemetry-exporter-python-arm64:1

  RegionMap:
    us-east-1:
      LambdaLayerARN: arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-python38-ver-1-0-0:1
    us-east-2:
      LambdaLayerARN: arn:aws:lambda:us-east-2:901920570463:layer:aws-otel-python38-ver-1-0-0:1
    us-west-2:
      LambdaLayerARN: arn:aws:lambda:us-west-2:901920570463:layer:aws-otel-python38-ver-1-0-0:1

Resources:
  CustomResourceConfigureLambdaFunction:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt AddConfigLambdaFunction.Arn
      LambdaArn: !Ref LambdaFunctionARN
      layers:
        - !FindInMap [layers, !Ref Runtime, !Ref Arch]
      env:
        AWS_LAMBDA_EXEC_WRAPPER: !Ref WrapperHandler
      

  AddConfigLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: coralogix-otel-lambda-configure
      Handler: index.lambda_handler
      Runtime: python3.9
      Policies:
        - Statement:
          - Sid: AllowLambdaConfigUpdatePolicy
            Effect: Allow
            Action:
              - lambda:UpdateFunctionConfiguration
            Resource: "*"

      InlineCode: |
        import boto3
        import json
        import cfnresponse

        def handler(event, context):
          print("Received event: " + json.dumps(event, indent=2))
          lambda_client = boto3.client('lambda')
          lambda_client.update_function_configuration(
            FunctionName=event['ResourceProperties']['LambdaArn'],
            Layers=event['ResourceProperties']['layers'],
            Environment={
              'Variables': event['ResourceProperties']['env']
            }
          )
          return cfnresponse.SUCCESS

